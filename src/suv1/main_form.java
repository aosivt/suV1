/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package suv1;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import org.hsqldb.*;

import java.io.File;
import java.io.*;
import java.io.FileNotFoundException;
import java.io.FileWriter;

import org.jdom2.*;
import org.jdom2.output.XMLOutputter;


import java.sql.Statement;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

import static java.nio.file.StandardCopyOption.*;

import java.util.Scanner;
import java.util.GregorianCalendar;
import java.io.IOException;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.print.DocFlavor;



/**
 *
 * @author oschepkovau
 */
public class main_form extends javax.swing.JFrame {
public int id_st;
    /**
     * Creates new form main_form
     */
    public main_form() {
        initComponents();
        this.init_BD();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu3 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu5 = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();

        jMenu3.setText("File");
        jMenuBar2.add(jMenu3);

        jMenu4.setText("Edit");
        jMenuBar2.add(jMenu4);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Главная страница");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jLabel1.setFont(new java.awt.Font("Arial", 3, 18)); // NOI18N
        jLabel1.setText("Список сотрудников Государственной службы по надзору и контролю в сфере образования Кемеровской области");

        jMenu1.setText("Меню");

        jMenu5.setText("Работа по сотрудникам");

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F9, 0));
        jMenuItem4.setText("Составить отчет");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem4);

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F7, 0));
        jMenuItem3.setText("Изменить данные");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem3);

        jMenuItem6.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F12, 0));
        jMenuItem6.setText("Удалить запись о сотруднике");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem6);

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F8, 0));
        jMenuItem1.setText("Новый сотрудник");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem1);

        jMenu1.add(jMenu5);

        jMenuItem7.setText("Просмотр данных по событиям");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem7);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Программные компоненты");

        jMenuItem5.setText("Копия внутренних данных ");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem5);

        jMenuItem2.setText("Установить БД");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem2);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(jScrollPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 627, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        this.install_BD();
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
new_corr new_cor = new new_corr();
new_cor.id_fn =0;
new_cor.id_mn =0;
new_cor.id_s =0;
new_cor.setTitle("Новый сотрудник");
new_cor.setVisible(rootPaneCheckingEnabled);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
//JOptionPane.showMessageDialog(rootPane, this.jTable1.getSelectedRow(), "Переподготовка",JOptionPane.QUESTION_MESSAGE);
//

new_corr new_cor = new new_corr();
new_cor.setTitle("Редактирование");
new_cor.id_fn =0;
new_cor.id_mn =0;
new_cor.id_s =0;
new_cor.id_mn = Integer.parseInt(this.jTable1.getValueAt(this.jTable1.getSelectedRow(), 0).toString());
//JOptionPane.showMessageDialog(rootPane, new_cor.id_mn, "Переподготовка",JOptionPane.QUESTION_MESSAGE);
new_cor.setVisible(rootPaneCheckingEnabled);

    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
  this.report_bd();
    
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        
        try {                                           
 
        Connection c = null;
        c = DriverManager.getConnection("jdbc:hsqldb:file:settings/testdb;shutdown=true", "ok","ghbdtl");
        Statement s = c.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
        ResultSet rs = s.executeQuery("select id_mn,id_fn,first_name,second_name,patronymic,"
                + "sex,education,categoty,group_w,years_old,exp,id_s,id_ed,id_cat,id_gr  "
        + "from sum_main inner join full_name on sum_main.id_fn = full_name.id_fn "
                + " inner join gr on sum_main.id_gr = gr.id_gr"
                + " inner join cat on sum_main.id_cat = cat.id_cat"
                + " inner join educat  on sum_main.id_ed = educat.id_ed"
                + " inner join sex on sum_main.id_s = sex.id_s");
        rs.last();
        
        System.err.println(rs.getRow() + "//количество записей");
        
        rs.beforeFirst();
        Element main_report = new Element("worker");
        Document myDocument = new Document(main_report);
        while (rs.next())
        {
        //d_mn,id_fn,first_name,second_name,patronymic,sex,education,categoty,group_w,years_old,exp
                
       // main_report.setAttribute(new Attribute("vin", "123fhg5869705iop90"));
        main_report.addContent(new Element("fn").addContent(rs.getString(4) + " " + rs.getString(3) + " " + rs.getString(5))
                .setAttribute(new Attribute("id_fn",rs.getString(2))));
        main_report.addContent(new Element("birthday").addContent(rs.getString(10))
                .setAttribute(new Attribute("id_mn",rs.getString(1))));
        main_report.addContent(new Element("exp_all").addContent(rs.getString(11).substring(0, 8))
                .setAttribute(new Attribute("id_mn",rs.getString(1))));
        main_report.addContent(new Element("exp_in").addContent(rs.getString(11).substring(9, 19))
                .setAttribute(new Attribute("id_mn",rs.getString(1))));
        main_report.addContent(new Element("sex").addContent(rs.getString(6))
                 .setAttribute(new Attribute("id_s",rs.getString(12))));
        main_report.addContent(new Element("education").addContent(rs.getString(7))
                 .setAttribute(new Attribute("id_ed",rs.getString(13))));
        main_report.addContent(new Element("categoty").addContent(rs.getString(8))
                .setAttribute(new Attribute("id_cat",rs.getString(13))));
        main_report.addContent(new Element("group_w").addContent(rs.getString(9))
                 .setAttribute(new Attribute("id_gr",rs.getString(14))));
       // main_report.addContent(new Element("license").addContent("1ABC234").setAttribute("state", "CA"));
        main_report.addContent(new Comment("Таблица с данными о сотрудниках Кузбассобрнадзор"));
        main_report.addContent(new Comment("Документ содержит ошибку на categoty - должностная категория"));
        }
        
        try {
        XMLOutputter outputt = new XMLOutputter();
        outputt.output(myDocument, System.out);
        
        FileWriter writer = new FileWriter(new File("").getAbsolutePath() + 
                File.separator + "settings"+ 
                File.separator + "backup_data.xml");
        outputt.output(myDocument, writer);
        writer.close();
        
        } catch (java.io.IOException e) {
        e.printStackTrace();
        }
    } catch (SQLException ex) {
        Logger.getLogger(main_form.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
int id = Integer.valueOf(this.jTable1.getValueAt(this.jTable1.getSelectedRow(), 0).toString());
//String te = this.jTable1.getValueAt(this.jTable1.getSelectedRow(), 1).toString();
///JOptionPane.showMessageDialog(rootPane, id,"Квалификация",JOptionPane.QUESTION_MESSAGE);       
Connection c;
    try {
        c = DriverManager.getConnection("jdbc:hsqldb:file:settings/testdb;shutdown=true", "ok","ghbdtl");
        PreparedStatement ps = null;

ps = c.prepareStatement("delete from full_name where id_fn = " + id);
ps.execute();
ps = c.prepareStatement("delete from sum_main where id_fn = " + id);
ps.execute();
ps = c.prepareStatement("delete from retrain where id_fn = " + id);
ps.execute();
ps = c.prepareStatement("delete from train where id_fn = " + id);
ps.execute();

    } catch (SQLException ex) {
        Logger.getLogger(new_corr.class.getName()).log(Level.SEVERE, null, ex);
    }
    this.init_BD();
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
this.init_BD();        // TODO add your handling code here:

    }//GEN-LAST:event_formWindowActivated

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
form_for_bd developments = new form_for_bd();
developments.setVisible(rootPaneCheckingEnabled);
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
form_for_bd fBD = new form_for_bd();
fBD.setVisible(true);        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowOpened
    public void report_bd()
    {
      try {
        GregorianCalendar chekdate = new GregorianCalendar();
                String[][] rep_main = new String[19][17];
                int ind_y =0;
                int ind_x =0;
                int ind_s =1;
                int ind_e =1;
                int ind_cat = 0;
                Connection c = null;
                c = DriverManager.getConnection("jdbc:hsqldb:file:settings/testdb;shutdown=true", "ok","ghbdtl");
                Statement s = c.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
        ResultSet rs = s.executeQuery("select * from sum_main where id_cat= 1");
        ResultSet rs2 = null;
        rs.last();
       while (ind_x<19)
       {
           while (ind_y<17)
           {
       rep_main[ind_x][ind_y] = "0";
       ind_y++;
           }
       ind_y =0;
       ind_x++;
       }
                ind_y =1;
                ind_x =1;
        
        
        while (ind_x<19){
        while(ind_y<6){
        while (ind_e<5){
        while (ind_s<3){
            rs = s.executeQuery("select count(id_mn) from sum_main where id_cat= " 
                + String.valueOf(ind_x) + "and id_gr=" + String.valueOf(ind_y) 
                + "and id_ed=" + String.valueOf(ind_e)
                + "and id_s=" + String.valueOf(ind_s));
            rs.beforeFirst();rs.next();
        if (rs.getInt(1)>0){
        if (ind_cat>8){ind_y = ind_y -1;}
        /*Заполнение столбца с половым признаком)))*/
        rep_main[ind_y+ind_cat][ind_s] = String.valueOf(Integer.valueOf(rep_main[ind_y+ind_cat][ind_s]) 
                + Integer.valueOf(rs.getString(1)));
        rep_main[ind_cat][ind_s] = String.valueOf(Integer.valueOf(rep_main[ind_cat][ind_s]) 
                + Integer.valueOf(rs.getString(1)));
        ///////////////////////////////////////////////////////////////////////
        /*Заполнение столбца связанного с образованием*/
        rep_main[ind_y+ind_cat][2 + ind_e] = String.valueOf(Integer.valueOf(rep_main[ind_y+ind_cat][2 + ind_e]) 
                + Integer.valueOf(rs.getString(1)));
        rep_main[ind_cat][2 + ind_e] = String.valueOf(Integer.valueOf(rep_main[ind_cat][2 + ind_e]) 
                + Integer.valueOf(rs.getString(1)));
        ///////////////////////////////////////////////////////////////////////
        /*Заполнение столбца связанного с общими показателями*/        
        rep_main[ind_y+ind_cat][0] = String.valueOf(Integer.valueOf(rep_main[ind_y+ind_cat][1]) 
        + Integer.valueOf(rep_main[ind_y+ind_cat][2]));
        rep_main[ind_cat][0]= String.valueOf(Integer.valueOf(rep_main[ind_cat][1]) 
                + Integer.valueOf(rep_main[ind_cat][2]));
        if (ind_cat>8){ind_y = ind_y +1;}
        }
        rs=null;
        ind_s ++;
        }
        ind_s =1;
        ind_e ++;
        }
        ind_e =1;
        ind_y ++;
        }
        ind_y =1;
        if (ind_cat<7){ind_cat = ind_cat +4;}
        else if (ind_cat>7){ind_cat = ind_cat +5;}
        ind_x ++ ;
        }
    
      GregorianCalendar chekdate_old = new GregorianCalendar();
      GregorianCalendar birthday = new GregorianCalendar();
      GregorianCalendar exp = new GregorianCalendar();
              rs=null;
ind_x=1;
ind_y=1;
ind_cat=0;
        while (ind_x<5){
        while (ind_y<6){
rs = s.executeQuery("select id_fn,years_old,exp from sum_main where id_cat= " 
                + String.valueOf(ind_x) + "and id_gr=" + String.valueOf(ind_y));
rs.last();
System.err.println(rs.getRow() + "//количество записей");
//ind_e = rs.getRow();
if(rs.getRow()>0)
{
    
 rs.beforeFirst();
 while (rs.next())
 {
 String dt = rs.getString(2);
 String ex = rs.getString(3);
 System.err.println(ind_y+"|||"+dt);
    birthday = new GregorianCalendar(
              Integer.parseInt(dt.substring(6, 10)),
              Integer.parseInt(dt.substring(3, 5)),
              Integer.parseInt(dt.substring(0, 2)));
    
    exp = new GregorianCalendar(
              Integer.parseInt(ex.substring(15, 19)),
              Integer.parseInt(ex.substring(12, 14)),
              Integer.parseInt(ex.substring(9, 11)));
    
    System.err.println(ind_x+"||"+ind_y+"|"+exp.get(GregorianCalendar.YEAR)+"||"+ex);
        
    
        int years = chekdate.get(GregorianCalendar.YEAR)-birthday.get(GregorianCalendar.YEAR);
        int months = chekdate.get(GregorianCalendar.MONTH)-birthday.get(GregorianCalendar.MONTH);
        int days = chekdate.get(GregorianCalendar.DAY_OF_MONTH)- birthday.get(GregorianCalendar.DAY_OF_MONTH);
        
if (days>30){months++;days=days-30;}
if (months>=12){months=months-12;years++;}
if (months==0){if (days<0){years--;months--;days=days+30;}}
if (months<0){years--;months=months+12;if (days<0){months--;days=days+30;}}
        
//System.err.println("Год:"+years+"||месяц:"+months+"|||дней:"+days);
if (years<30)
{rep_main[ind_y+ind_cat][7] = String.valueOf(Integer.parseInt(rep_main[ind_y+ind_cat][7])+1);rep_main[ind_cat][7] = String.valueOf(Integer.parseInt(rep_main[ind_cat][7]) + 1);}
else if (years>=30&&years<50)
{rep_main[ind_y+ind_cat][8] = String.valueOf(Integer.parseInt(rep_main[ind_y+ind_cat][8])+1);rep_main[ind_cat][8] = String.valueOf(Integer.parseInt(rep_main[ind_cat][8]) + 1);}
else if (years>=50&&years<60)
{rep_main[ind_y+ind_cat][9] = String.valueOf(Integer.parseInt(rep_main[ind_y+ind_cat][9])+1);rep_main[ind_cat][9] = String.valueOf(Integer.parseInt(rep_main[ind_cat][9]) + 1);}
else if (years>=50)
{rep_main[ind_y+ind_cat][10] = String.valueOf(Integer.parseInt(rep_main[ind_y+ind_cat][10])+1);rep_main[ind_cat][10] = String.valueOf(Integer.parseInt(rep_main[ind_cat][10]) + 1);}

years =0;
months =0;
days =0;

        years = chekdate.get(GregorianCalendar.YEAR)-exp.get(GregorianCalendar.YEAR);
        months = chekdate.get(GregorianCalendar.MONTH)-exp.get(GregorianCalendar.MONTH);
        days = chekdate.get(GregorianCalendar.DAY_OF_MONTH)- exp.get(GregorianCalendar.DAY_OF_MONTH);

        years = years + Integer.parseInt(ex.substring(0, 2));
        months = months + Integer.parseInt(ex.substring(3, 5));
        days = days + Integer.parseInt(ex.substring(6, 8));
        
     
        
        
if (days>30){months++;days=days-30;}
if (months>=12){months=months-12;years++;}
if (months==0){if (days<0){months--;days=days+30;}}
if (months<0){ years--;months=months+12;if (days<0){months--;days=days+30;}}

//JOptionPane.showMessageDialog(rootPane, "Привет!!!",String.valueOf( years),JOptionPane.QUESTION_MESSAGE);               

if (years>=1&&years<5)
{rep_main[ind_y+ind_cat][11] = String.valueOf(Integer.parseInt(rep_main[ind_y+ind_cat][11])+1);rep_main[ind_cat][11] = String.valueOf(Integer.parseInt(rep_main[ind_cat][11]) + 1);}
else if (years>=5&&years<10)
{rep_main[ind_y+ind_cat][12] = String.valueOf(Integer.parseInt(rep_main[ind_y+ind_cat][12])+1);rep_main[ind_cat][12] = String.valueOf(Integer.parseInt(rep_main[ind_cat][12]) + 1);}
else if (years>=10&&years<15)
{rep_main[ind_y+ind_cat][13] = String.valueOf(Integer.parseInt(rep_main[ind_y+ind_cat][13]) +1);rep_main[ind_cat][13] = String.valueOf(Integer.parseInt(rep_main[ind_cat][13]) + 1);}
else if (years>=15)
{rep_main[ind_y+ind_cat][14] = String.valueOf(Integer.parseInt(rep_main[ind_y+ind_cat][14])+1);rep_main[ind_cat][14] = String.valueOf(Integer.parseInt(rep_main[ind_cat][14]) + 1);}

years =0;
months =0;
days =0;

rs2 = s.executeQuery("select count(retrain.id_fn) from retrain "
        + " where id_fn= "+rs.getString(1)+" and time_ret like '%."
        + String.valueOf(chekdate.get(GregorianCalendar.YEAR)) +"'");
rs2.first();
System.err.println(rs2.getString(1)+":количество переподготовк за"+ String.valueOf(chekdate.get(GregorianCalendar.YEAR)) );
rep_main[ind_y+ind_cat][15] = String.valueOf(Integer.parseInt(rep_main[ind_y+ind_cat][15])+ rs2.getInt(1));
rep_main[ind_cat][15] = String.valueOf(Integer.parseInt(rep_main[ind_cat][15]) + rs2.getInt(1));

rs2 = s.executeQuery("select count(train.id_fn) from train "
        + " where id_fn= "+rs.getString(1)+" and time_tra like '%."
        + String.valueOf(chekdate.get(GregorianCalendar.YEAR)) +"'");
rs2.first();
System.err.println(rs2.getString(1)+":количество переподготовк за"+ String.valueOf(chekdate.get(GregorianCalendar.YEAR)) );
rep_main[ind_y+ind_cat][16] = String.valueOf(Integer.parseInt(rep_main[ind_y+ind_cat][16])+ rs2.getInt(1));
rep_main[ind_cat][16] = String.valueOf(Integer.parseInt(rep_main[ind_cat][16]) + rs2.getInt(1));


/**/
}rs.close();
}
        ind_y++;}ind_y=1;ind_x++;ind_cat = ind_cat + 4;}        
/**/
c.close();

       ind_x =0; 
       ind_y =0;
       
while (ind_x<17)
{
    ind_y =  Integer.parseInt(rep_main[0][ind_x])+Integer.parseInt(rep_main[4][ind_x])
        +Integer.parseInt(rep_main[8][ind_x])+Integer.parseInt(rep_main[13][ind_x]);
rep_main[18][ind_x] = String.valueOf( ind_y);
//System.err.println(ind_y);
ind_x++;
}
        
        
        try {
 String[] ms = new String[] {"января", "февраля", "марта", "апреля", "мая", "июня", "июля", "августа", "сентября", "октября", "ноября", "декабря"};        
        File copy_file = new File("1.html");
        
        String name_rep = "report/html_rep "+  chekdate.get(GregorianCalendar.DAY_OF_MONTH)+"" +  (chekdate.get(GregorianCalendar.MONTH) +1)+ "_" + chekdate.get(GregorianCalendar.YEAR) + ".html";
        File html_rep = new File(name_rep);
            html_rep.createNewFile();
            FileWriter fw = new FileWriter(html_rep);        

  BufferedReader reader = new BufferedReader(new FileReader(copy_file));
  String line;
 
  /*
  InputStream in = new FileInputStream(copy_file);
  OutputStream out = new FileOutputStream(html_rep);

        byte[] buf = new byte[1024];
  int len;group_w
  while ((len = in.read(buf)) > 0){
      
  out.write(buf, 0, len);
  
  }
  in.close();
  out.close();*/
  //System.out.println("File copied.");
  
  int ind_col=0;
  int ind_row=0;
  
  while ((line = reader.readLine()) != null) {
    
      
      if (line.contains("@")==true) {
   
  if (ind_col>16)
  {
      ind_col=0;
      ind_row++;
      if (ind_row!=19)
      {
          if (rep_main[ind_row][ind_col].equals("0")){fw.write("");}
          else {fw.write(rep_main[ind_row][ind_col]);}
      }
      else
      {
      fw.write("");
      }
      ind_col++;
      
  
  }
  else
  {
 //      System.err.println(ind_row + "///" + ind_col);
  //    fw.write(rep_main[ind_row][ind_col]);
      if (rep_main[ind_row][ind_col].equals("0")){fw.write("");}
          else {fw.write(rep_main[ind_row][ind_col]);}
      ind_col++;
  }
  }
      
      else if (line.contains("date_month")==true)
      {
          String str = ms[(chekdate.get(GregorianCalendar.MONTH))];
          byte [] b = new byte[str.length()];
          b = str.getBytes("Cp1251");
          String str1251 = new String(str.getBytes("UTF-8"));
                  //new String(b,"Cp1251");
          System.err.println(str1251 + "///" + str);
           fw.write(str1251);
      }
      else 
      {
      fw.write(line);
      }
 }
  
  fw.close();
  reader.close();
java.awt.Desktop.getDesktop().open(html_rep);
        } catch (IOException ex) {
            Logger.getLogger(main_form.class.getName()).log(Level.SEVERE, null, ex);
        }
       
           
 
  
        
        
        
    } catch (SQLException ex) {
        Logger.getLogger(main_form.class.getName()).log(Level.SEVERE, null, ex);
    }
    }
    public void init_BD()
    {
        try {
Connection c;
c = DriverManager.getConnection("jdbc:hsqldb:file:settings/testdb;shutdown=true", "ok","ghbdtl");
PreparedStatement ps = null;
java.sql.Statement s = c.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
 
ResultSet rs = s.executeQuery("select id_mn, first_name,second_name,patronymic, years_old, exp  "
        + "from sum_main inner join full_name on sum_main.id_fn = full_name.id_fn order by second_name ");

rs.last();
String[] headers = {"id","ФИО", "Дата рождения","Общий стаж ГГС"};
Object[][] text_tab = new Object[rs.getRow()+1][4];
rs.beforeFirst();
String ex = ""   ;
GregorianCalendar chekdate = new GregorianCalendar();

int y =0;
int m =0;
int d =0;

while(rs.next()) {
ex = rs.getString("exp");

y = Integer.parseInt(ex.substring(0, 2)) 
        + chekdate.get(GregorianCalendar.YEAR)
        - Integer.parseInt(ex.substring(15, 19));

m = Integer.parseInt(ex.substring(3, 5)) +
    (chekdate.get(GregorianCalendar.MONTH)+1) - 
    Integer.parseInt(ex.substring(12, 14));

d = Integer.parseInt(ex.substring(6, 8)) +
    chekdate.get(GregorianCalendar.DAY_OF_MONTH) - 
    Integer.parseInt(ex.substring(9, 11));

if (d>30){m++;d=d-30;}
if (m>=12){m=m-12;y++;}
if (m==0){if (d<0){m--;d=d+30;}}
if (m<0){y--;m=m+12;if (d<0){m--;d=d+30;}}


ex = String.valueOf("Лет:"+y+"  Месяцев:"+m+"  Дней:"+d);
/*+ "/"
         + ex.substring(3, 5)   + "/"
         + ex.substring(6, 8)   + "/"
         + ex.substring(9, 11)  + "/"
         + ex.substring(12, 14) + "/"
         + ex.substring(15, 19);*/

    
    
    text_tab[rs.getRow()-1][0] = rs.getLong("id_mn");
    text_tab[rs.getRow()-1][1] = rs.getString("second_name")
            + " "  + rs.getString("first_name")
            + " "  + rs.getString("patronymic");

    //////часть кода для подсчета возраста служащего
y = 0;
m = 0;
d = 0;
String patr = rs.getString("years_old");
patr = (patr.substring(0, 2) + "/" + patr.substring(3, 5) + "/" + patr.substring(6, 10));
GregorianCalendar chekdate_old = new GregorianCalendar();
GregorianCalendar birthday = new GregorianCalendar(
              Integer.parseInt(patr.substring(6, 10)),
              Integer.parseInt(patr.substring(3, 5)),
              Integer.parseInt(patr.substring(0, 2)));
y = chekdate_old.get(GregorianCalendar.YEAR)-birthday.get(GregorianCalendar.YEAR);
m = chekdate_old.get(GregorianCalendar.MONTH)-birthday.get(GregorianCalendar.MONTH)+1;
d = chekdate_old.get(GregorianCalendar.DAY_OF_MONTH)- birthday.get(GregorianCalendar.DAY_OF_MONTH);

if (d>30){m++;d=d-30;}
if (m>12){m=m-12;y++;}
if (m==0){if (d<0){m--;d=d+30;}}
if (m<0){y--;m=m+12;if (d<0){m--;d=d+30;}}

patr = patr + "   |   " + "   Лет:   " + y;

////////////////////-------------------//////////////////////////

    
    
    text_tab[rs.getRow()-1][2] = patr;
    
    
    
    text_tab[rs.getRow()-1][3] = ex;
long id = rs.getLong("id_mn");
String firstName = rs.getString("first_name");

System.err.println(id + ", " + firstName + ", " + patr );
}    
this.jTable1.setModel(new javax.swing.table.DefaultTableModel(
            text_tab,
           headers
        ));

c.close();
            
//this.jTable1.getColumnModel().getColumn(0).
this.jTable1.getColumnModel().getColumn(0).setPreferredWidth(-1);
this.jTable1.getColumnModel().getColumn(0).setMaxWidth(-1);
this.jTable1.getColumnModel().getColumn(0).setMinWidth(-1);
       this.setExtendedState(MAXIMIZED_BOTH);
        } catch (SQLException ex) {
            Logger.getLogger(main_form.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }
    
    public void install_BD()
    {
//        if (new File("bd").exists()==false)
  //      {
    //    new File("bd").mkdir();

      //  }
                
        
        try {
            Connection c;
c = DriverManager.getConnection("jdbc:hsqldb:file:settings/testdb;shutdown=true", "ok","ghbdtl");
PreparedStatement ps = null;
ps = c.prepareStatement("create memory table full_name "
        + "(id_fn integer not null,"
        + "first_name varchar(50) not null,"
        + "second_name varchar(50) not null,"
        + "patronymic  varchar(50) not null)");
ps.execute();
ps = c.prepareStatement("insert into full_name "
        + "(id_fn,first_name,second_name,patronymic)"
        + " values(?,?,?,?)");

ps.setInt(1, 1);ps.setString(2, "Иван");ps.setString(3, "Иванов");
ps.setString(4, "Иванович");ps.execute();

  JOptionPane.showMessageDialog(rootPane, "Прошла", "Фамилия",JOptionPane.QUESTION_MESSAGE);

ps = null;  

ps = c.prepareStatement("create memory table gr"
        + "(id_gr integer not null,"
        + "group_w varchar(50) not null)");
ps.execute();

ps = c.prepareStatement("insert into gr "
        + "(id_gr,group_w)"
        + " values(?,?)");
ps.setInt(1, 1);ps.setString(2, "Высшая");ps.execute();

ps.setInt(1, 2);ps.setString(2, "Главная");ps.execute();

ps.setInt(1, 3);ps.setString(2, "Ведущая");ps.execute();

ps.setInt(1, 4);ps.setString(2, "Старшая");ps.execute();

ps.setInt(1, 5);ps.setString(2, "Младшая");ps.execute();

//ps.setInt(1, 6);ps.setString(2, "Не заполненно");ps.execute();

JOptionPane.showMessageDialog(rootPane, "Прошла", "Группа",JOptionPane.QUESTION_MESSAGE);

ps = c.prepareStatement("create memory table cat"
        + "(id_cat integer not null,"
        + "categoty varchar(50) not null)");
ps.execute();

ps = c.prepareStatement("insert into cat "
        + "(id_cat,categoty)"
        + " values(?,?)");
ps.setInt(1, 1);ps.setString(2, "Руководители");ps.execute();

ps.setInt(1, 2);ps.setString(2, "Помощники");ps.execute();

ps.setInt(1, 3);ps.setString(2, "Специалисты");ps.execute();

ps.setInt(1, 4);ps.setString(2, "Обеспечивающие");ps.execute();


JOptionPane.showMessageDialog(rootPane, "Прошла", "Категория",JOptionPane.QUESTION_MESSAGE);

ps = c.prepareStatement("create memory table educat"
        + "(id_ed integer not null,"
        + "education varchar(50) not null)");
ps.execute();

ps = c.prepareStatement("insert into educat "
        + "(id_ed,education)"
        + " values(?,?)");
ps.setInt(1, 1);ps.setString(2, "Высшее");ps.execute();

ps.setInt(1, 2);ps.setString(2, "Неполное Высшее");ps.execute();

ps.setInt(1, 3);ps.setString(2, "Средне специальное");ps.execute();

ps.setInt(1, 4);ps.setString(2, "Среднее");ps.execute();


JOptionPane.showMessageDialog(rootPane, "Прошла", "Образование",JOptionPane.QUESTION_MESSAGE);

ps = c.prepareStatement("create memory table sex"
        + "(id_s integer not null,"
        + "sex varchar(50) not null)");
ps.execute();

ps = c.prepareStatement("insert into sex "
        + "(id_s,sex)"
        + " values(?,?)");

ps.setInt(1, 1);ps.setString(2, "Мужской");ps.execute();

ps.setInt(1, 2);ps.setString(2, "Женский");ps.execute();

JOptionPane.showMessageDialog(rootPane, "Прошла", "Пол",JOptionPane.QUESTION_MESSAGE);


ps = c.prepareStatement("create memory table retrain"
        + "(id_ret integer not null,"
        + "time_ret varchar(50) not null,"
        + "id_fn integer)");
ps.execute();

JOptionPane.showMessageDialog(rootPane, "Прошла", "Переподготовка",JOptionPane.QUESTION_MESSAGE);

ps = c.prepareStatement("create memory table train"
        + "(id_tra integer not null,"
        + "time_tra varchar(50) not null,"
        + "id_fn integer)");
ps.execute();

JOptionPane.showMessageDialog(rootPane, "Прошла", "Квалификация",JOptionPane.QUESTION_MESSAGE);

ps = c.prepareStatement("create memory table sum_main"
        + "(id_mn integer not null,"
        + "id_fn integer,"
        + "id_gr integer,"
        + "id_cat integer,"
        + "id_ed integer,"
        + "id_s integer,"
        + "years_old varchar(50),"
        + "exp varchar(50))");
ps.execute();

JOptionPane.showMessageDialog(rootPane, "Прошла", "Суммарная",JOptionPane.QUESTION_MESSAGE);

ps = c.prepareStatement("insert into sum_main "
        + "(id_mn,id_fn,id_gr,id_cat,id_ed,id_s,years_old,exp)"
        + " values(?,?,?,?,?,?,?,?)");

ps.setInt(1, 1);ps.setInt(2, 1);ps.setInt(3, 1);
ps.setInt(4, 1);ps.setInt(5, 1);ps.setInt(6, 1);
ps.setString(7, "22.12.2000");ps.setString(8, "00.00.00/22.12.2000");
ps.execute();


c.close();
        } catch (SQLException ex) {
            Logger.getLogger(main_form.class.getName()).log(Level.SEVERE, null, ex);
        }
          JOptionPane.showMessageDialog(rootPane, "Поздравляю", "Удачная установка БД",JOptionPane.QUESTION_MESSAGE);
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(main_form.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(main_form.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(main_form.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(main_form.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new main_form().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
